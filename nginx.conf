env AWS_ACCESS_KEY_ID;
env AWS_SECRET_ACCESS_KEY;
env S3_BUCKET_NAME;

worker_processes 1;

events {
  worker_connections 1024;
}

http {
  server {
    listen 80;

    client_max_body_size 0;

    location ~* ^/uploads/(.*)/(.*)/(.*) {
      if ($request_method != PUT) {
        return 404;
      }

      set $entity $1;
      set $property $2;
      set $filename $3;
      set_secure_random_alphanum $prefix 64;
      set_sha1 $prefixsha $prefix;
      set_by_lua $date "return ngx.cookie_time(ngx.time())";
      set_sha1 $datesha $date;
      set $upload_id $prefixsha$datesha;
      set $key $entity/$property/$upload_id/original/$filename;
      set_by_lua $bucket "return os.getenv('S3_BUCKET_NAME')";
      set $url http://$bucket.s3.amazonaws.com/$key;
      set_by_lua $aws_access_key "return os.getenv('AWS_ACCESS_KEY_ID')";
      set_by_lua $aws_secret_key "return os.getenv('AWS_SECRET_ACCESS_KEY')";
      set $acl public-read;
      set $canonicalized_amz_headers "x-amz-acl:$acl\nx-amz-date:$date";
      set $canonicalized_resource "/$bucket/$key";
      set $string_to_sign "$request_method\n$http_content_md5\n$http_content_type\n\n$canonicalized_amz_headers\n$canonicalized_resource";
      set_by_lua $aws_signature "return ngx.encode_base64(ngx.hmac_sha1(ngx.var.aws_secret_key, ngx.var.string_to_sign))";

      proxy_set_header Authorization "AWS $aws_access_key:$aws_signature";
      proxy_set_header x-amz-acl $acl;
      proxy_set_header x-amz-date $date;
      proxy_hide_header x-amz-id-2;
      proxy_hide_header x-amz-request-id;
      add_header X-File-URL $url;

      resolver 8.8.8.8 valid=300s;
      resolver_timeout 10s;

      proxy_pass $url;
    }
  }
}
